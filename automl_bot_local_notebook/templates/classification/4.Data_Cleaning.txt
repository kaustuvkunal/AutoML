<text>
##  3. Data Prepration & Cleaning 

 
### 3.1 Missing Values Treatment

Handle the missing values, for continuous variables, replace by mean. For categorical variables, replace by mode
</text>

<code>
 
 
 
## for numerical columns, replace the missing values by mean
train_df[num_cols] = train_df[num_cols].fillna(train_df[num_cols].mean())
try:
	test_df[num_cols] = test_df[num_cols].fillna(test_df[num_cols].mean())
except:
	pass 
## for categorical columns, replace the missing values by mode
train_df[cat_cols] = train_df[cat_cols].fillna(train_df[cat_cols].mode())    
try:
	test_df[cat_cols] = test_df[cat_cols].fillna(test_df[cat_cols].mode())
except:
	pass
</code>

<text>

### 3.2 Encoding OneHot Encoding of categorical data
 
One hot encoding of categorical data ( other option is label encoding)

</text>

<code>


# one hot encoding 
 
combined_data = pd.concat([train_df, test_df], axis=0, sort=False)
combined_data = pd.get_dummies(combined_data, columns=combined_data.columns, drop_first=True, sparse=True)
train_df = combined_data.iloc[: len(train_df)]
test_df = combined_data.iloc[ len(train_df): ]

print (f'Shape of training data after one hot encoding: {train_df.shape}')
print (f'Shape of testing data after one hot encoding: {train_df.shape}')


</code>

<code>
# label encoding commented
# columns = train_df.columns
# num_cols = train_df._get_numeric_data().columns
# cat_cols = list(set(columns) - set(num_cols))

# if len(cat_cols) > 0:
#     for col in cat_cols:
#         le = LabelEncoder()

#         if col in list(test_df.columns):
#             le.fit(list(train_df[col].values) + list(test_df[col].values))
#         else:
#             le.fit(list(train_df[col].values))

#         train_df[col] = le.transform(list(train_df[col].values))
#         try:
#             test_df[col] = le.transform(list(test_df[col].values))
#         except:
#             pass

# ## label encode the target variable (if object type)
# if y.dtype.name == "object":
#     le = LabelEncoder()
#     Y = le.fit_transform(y.values)
    
 </code>


<text>
### 3.3 Train and Validation sets split

Create the training and validation sets for training the model and validating it
</text>

<code>
X_train, X_valid, y_train, y_valid = train_test_split(train_df, y, test_size=0.20, random_state=2018)
</code>


 